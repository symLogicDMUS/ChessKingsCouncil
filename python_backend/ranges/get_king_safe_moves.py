from custom_except import *
from bools.sqr_under_attack import sqr_under_attack


def get_king_safe_moves(board, move_list, color):
    """get the squares that king can move from the moves list, that do not put it in check"""
    return list(filter(lambda sqr: sqr_under_attack(sqr, board, color) == False, move_list))


if __name__ == "__main__":

    # king_range_test, 4k3/6pp/8/8/3Pp3/2bK4/4B3/8 w - - 0 1
    board =\
    {(1, 1): '#', (2, 1): '#', (3, 1): '#', (4, 1): '#', (5, 1): '#', (6, 1): '#', (7, 1): '#', (8, 1): '#', 
     (1, 2): '#', (2, 2): '#', (3, 2): '#', (4, 2): '#', (5, 2): 'WB1', (6, 2): '#', (7, 2): '#', (8, 2): '#', 
     (1, 3): '#', (2, 3): '#', (3, 3): 'BB1', (4, 3): 'WK1', (5, 3): '#', (6, 3): '#', (7, 3): '#', (8, 3): '#', 
     (1, 4): '#', (2, 4): '#', (3, 4): '#', (4, 4): 'WP1', (5, 4): 'BP1', (6, 4): '#', (7, 4): '#', (8, 4): '#', 
     (1, 5): '#', (2, 5): '#', (3, 5): '#', (4, 5): '#', (5, 5): '#', (6, 5): '#', (7, 5): '#', (8, 5): '#', 
     (1, 6): '#', (2, 6): '#', (3, 6): '#', (4, 6): '#', (5, 6): '#', (6, 6): '#', (7, 6): '#', (8, 6): '#', 
     (1, 7): '#', (2, 7): '#', (3, 7): '#', (4, 7): '#', (5, 7): '#', (6, 7): '#', (7, 7): 'BP2', (8, 7): 'BP3', 
     (1, 8): '#', (2, 8): '#', (3, 8): '#', (4, 8): '#', (5, 8): 'BK1', (6, 8): '#', (7, 8): '#', (8, 8): '#'}

    get_king_safe_moves(board, [(4, 1), (6, 1), (4, 2), (5, 2), (6, 2)], 'W')